// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from chat.proto</summary>
public static partial class ChatReflection {

  #region Descriptor
  /// <summary>File descriptor for chat.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ChatReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpjaGF0LnByb3RvIjIKDExvZ2luUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEo",
          "CRIQCghwYXNzd29yZBgCIAEoCSJ8Cg1Mb2dpblJlc3BvbnNlEiEKBGNvZGUY",
          "ASABKA4yEy5Mb2dpblJlc3BvbnNlLkNvZGUSCwoDdWlkGAIgASgFIjsKBENv",
          "ZGUSCwoHU1VDQ0VTUxAAEhIKDlVTRVJfTk9UX0ZPVU5EEAESEgoOUEFTU1dP",
          "UkRfRVJST1IQAiI1Cg9SZWdpc3RlclJlcXVlc3QSEAoIdXNlcm5hbWUYASAB",
          "KAkSEAoIcGFzc3dvcmQYAiABKAkiawoQUmVnaXN0ZXJSZXNwb25zZRIkCgRj",
          "b2RlGAEgASgOMhYuUmVnaXN0ZXJSZXNwb25zZS5Db2RlEgsKA3VpZBgCIAEo",
          "BSIkCgRDb2RlEgsKB1NVQ0NFU1MQABIPCgtVU0VSX0VYSVNUUxABIhEKD0xp",
          "c3RVc2VyUmVxdWVzdCJgChBMaXN0VXNlclJlc3BvbnNlEiUKBXVzZXJzGAEg",
          "AygLMhYuTGlzdFVzZXJSZXNwb25zZS5Vc2VyGiUKBFVzZXISCwoDdWlkGAEg",
          "ASgFEhAKCHVzZXJuYW1lGAIgASgJIkcKB01lc3NhZ2USDwoHc3JjX3VpZBgB",
          "IAEoBRIQCghkZXN0X3VpZBgCIAEoBRILCgNtc2cYAyABKAkSDAoEZGF0YRgE",
          "IAEoDGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginRequest), global::LoginRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResponse), global::LoginResponse.Parser, new[]{ "Code", "Uid" }, null, new[]{ typeof(global::LoginResponse.Types.Code) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterRequest), global::RegisterRequest.Parser, new[]{ "Username", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RegisterResponse), global::RegisterResponse.Parser, new[]{ "Code", "Uid" }, null, new[]{ typeof(global::RegisterResponse.Types.Code) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListUserRequest), global::ListUserRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListUserResponse), global::ListUserResponse.Parser, new[]{ "Users" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ListUserResponse.Types.User), global::ListUserResponse.Types.User.Parser, new[]{ "Uid", "Username" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "SrcUid", "DestUid", "Msg", "Data" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
  private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest(LoginRequest other) : this() {
    username_ = other.username_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginRequest Clone() {
    return new LoginRequest(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginResponse : pb::IMessage<LoginResponse> {
  private static readonly pb::MessageParser<LoginResponse> _parser = new pb::MessageParser<LoginResponse>(() => new LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse(LoginResponse other) : this() {
    code_ = other.code_;
    uid_ = other.uid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResponse Clone() {
    return new LoginResponse(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private global::LoginResponse.Types.Code code_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LoginResponse.Types.Code Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 2;
  private int uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Uid != other.Uid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Uid != 0) hash ^= Uid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Code);
    }
    if (Uid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Uid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
    }
    if (Uid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Uid != 0) {
      Uid = other.Uid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          code_ = (global::LoginResponse.Types.Code) input.ReadEnum();
          break;
        }
        case 16: {
          Uid = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the LoginResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Code {
      [pbr::OriginalName("SUCCESS")] Success = 0,
      [pbr::OriginalName("USER_NOT_FOUND")] UserNotFound = 1,
      [pbr::OriginalName("PASSWORD_ERROR")] PasswordError = 2,
    }

  }
  #endregion

}

public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest> {
  private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterRequest(RegisterRequest other) : this() {
    username_ = other.username_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterRequest Clone() {
    return new RegisterRequest(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterRequest other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse> {
  private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse(RegisterResponse other) : this() {
    code_ = other.code_;
    uid_ = other.uid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RegisterResponse Clone() {
    return new RegisterResponse(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private global::RegisterResponse.Types.Code code_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RegisterResponse.Types.Code Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "uid" field.</summary>
  public const int UidFieldNumber = 2;
  private int uid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Uid {
    get { return uid_; }
    set {
      uid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RegisterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RegisterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Uid != other.Uid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Uid != 0) hash ^= Uid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Code);
    }
    if (Uid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Uid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
    }
    if (Uid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RegisterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Uid != 0) {
      Uid = other.Uid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          code_ = (global::RegisterResponse.Types.Code) input.ReadEnum();
          break;
        }
        case 16: {
          Uid = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RegisterResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Code {
      [pbr::OriginalName("SUCCESS")] Success = 0,
      [pbr::OriginalName("USER_EXISTS")] UserExists = 1,
    }

  }
  #endregion

}

public sealed partial class ListUserRequest : pb::IMessage<ListUserRequest> {
  private static readonly pb::MessageParser<ListUserRequest> _parser = new pb::MessageParser<ListUserRequest>(() => new ListUserRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListUserRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserRequest(ListUserRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserRequest Clone() {
    return new ListUserRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListUserRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListUserRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListUserRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class ListUserResponse : pb::IMessage<ListUserResponse> {
  private static readonly pb::MessageParser<ListUserResponse> _parser = new pb::MessageParser<ListUserResponse>(() => new ListUserResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListUserResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserResponse(ListUserResponse other) : this() {
    users_ = other.users_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListUserResponse Clone() {
    return new ListUserResponse(this);
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ListUserResponse.Types.User> _repeated_users_codec
      = pb::FieldCodec.ForMessage(10, global::ListUserResponse.Types.User.Parser);
  private readonly pbc::RepeatedField<global::ListUserResponse.Types.User> users_ = new pbc::RepeatedField<global::ListUserResponse.Types.User>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ListUserResponse.Types.User> Users {
    get { return users_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListUserResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListUserResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!users_.Equals(other.users_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= users_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    users_.WriteTo(output, _repeated_users_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += users_.CalculateSize(_repeated_users_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListUserResponse other) {
    if (other == null) {
      return;
    }
    users_.Add(other.users_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ListUserResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class User : pb::IMessage<User> {
      private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<User> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::ListUserResponse.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User(User other) : this() {
        uid_ = other.uid_;
        username_ = other.username_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public User Clone() {
        return new User(this);
      }

      /// <summary>Field number for the "uid" field.</summary>
      public const int UidFieldNumber = 1;
      private int uid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Uid {
        get { return uid_; }
        set {
          uid_ = value;
        }
      }

      /// <summary>Field number for the "username" field.</summary>
      public const int UsernameFieldNumber = 2;
      private string username_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Username {
        get { return username_; }
        set {
          username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as User);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(User other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Uid != other.Uid) return false;
        if (Username != other.Username) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Uid != 0) hash ^= Uid.GetHashCode();
        if (Username.Length != 0) hash ^= Username.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Uid != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Uid);
        }
        if (Username.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Username);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Uid != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
        }
        if (Username.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(User other) {
        if (other == null) {
          return;
        }
        if (other.Uid != 0) {
          Uid = other.Uid;
        }
        if (other.Username.Length != 0) {
          Username = other.Username;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Uid = input.ReadInt32();
              break;
            }
            case 18: {
              Username = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

public sealed partial class Message : pb::IMessage<Message> {
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChatReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    srcUid_ = other.srcUid_;
    destUid_ = other.destUid_;
    msg_ = other.msg_;
    data_ = other.data_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "src_uid" field.</summary>
  public const int SrcUidFieldNumber = 1;
  private int srcUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SrcUid {
    get { return srcUid_; }
    set {
      srcUid_ = value;
    }
  }

  /// <summary>Field number for the "dest_uid" field.</summary>
  public const int DestUidFieldNumber = 2;
  private int destUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DestUid {
    get { return destUid_; }
    set {
      destUid_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 3;
  private string msg_ = "";
  /// <summary>
  /// if data exists, msg means file name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SrcUid != other.SrcUid) return false;
    if (DestUid != other.DestUid) return false;
    if (Msg != other.Msg) return false;
    if (Data != other.Data) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
    if (DestUid != 0) hash ^= DestUid.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SrcUid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SrcUid);
    }
    if (DestUid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DestUid);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Msg);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Data);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SrcUid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcUid);
    }
    if (DestUid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestUid);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    if (other.SrcUid != 0) {
      SrcUid = other.SrcUid;
    }
    if (other.DestUid != 0) {
      DestUid = other.DestUid;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SrcUid = input.ReadInt32();
          break;
        }
        case 16: {
          DestUid = input.ReadInt32();
          break;
        }
        case 26: {
          Msg = input.ReadString();
          break;
        }
        case 34: {
          Data = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
